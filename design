refactors
get rid of inheritance
Things
  Input
  Network



singletons:
asynchronous actions

if it was single player:
  queue up events and reduce per frame

in a universe where time is meaningless:
  queue up events
  
what is truth?
  majority of players agree on a fact? -> ritual to change facts???
    need other players to remind owner where they actually are
      need algorithm for taking in multiple inputs and not letting any one control too much

milestone one:
  accept all states from all players

milestone two:
  moving window of volatile state, which becomes more solidified the further back you go
  uncertainty applied to number of updates yet to be seen for a moment in time
  
others -> network -> state -> update -> state -> network -> others

update loop:
  async network events -> cache queue
  apply network updates
  update state
  send network updates

network event looks like:
{
  objects: {
    id: {latest_pos, latest_rot} // lerp to this, only update objects you know about, keep track of history of applied updates
  },
  events: [
    {nonce, when, where, what, params} // if new, init and lerp, otherwise keep playing, might create objects[id]
  ]
}

local object isn't affected by updates, since they will always be off (behind), unless very off



Zones
  player needs
    current zone mesh data
    current list of players

Networking
  player sends
    current position
  server sends

New New Update Datastructure
  map of actors
  d3 style selection joins (enter, exit)

Events
  network
    player join/leave/input
    data load (zone, state, objects)
    no more delta

A Player Is Data
  mesh
  input type
  ...props

network.map(input[network.id]).forEach(updateObject(players[input.id], input.state))


New Update Datastructure
  Array of updateables
  emitter of events
    world:
      players
      layers
      singletons (devices,input,camera)

Save/Load aka Editor Mode aka Admin Mode
login? what if dont need authentication ever because develop locally
prod server doesn't allow uploading
alert dialog
serialization: tag fields to keep/map
  recursively serialize to primitives

Layers:
used for:
  exit zones
  plant distributions
  collision
  ground + heightmap
needs:
  density map
  link to generator/callback
  saving all that
layer syntax:
  let collision = new Layer({region}).does(collides).does(navmap);
  let ground = new Layer({region}).does(generator(terrain)));
  let flowers = new Layer({region}).does(generator(plant(flower)));
  let exitlayers = exits.map(e => new Layer({region: e.region}).does(exit(e.meta)));


place set pieces that procedurally change themselfs to fit context + params
have to find the wandering folx to train with them for magic abilities

Networking:
socket.io
skip peer to peer for now, can be added on as an optimization,
functionally, the game should be able to work the same.
server will route packets to the correct players
will need signalling anyways
anyways: no simulation on the server
this allows clients to 'cheat' and say they're anywhere
only problem is when modifications are made to the world
the server needs to see that and persist the changes

Patterns: 
set pieces can project forces and variables
of set pieces have a set of linear coefficients that 
combine forces from everything else, default to no 
interaction, layers of vector fields, layers can 
topologically depend on previous layers to multiply 
forces, use gradients of specific layers to place set 
pieces, derivatives provide normal and position, 
constant layers provide flags for toggling styles, 
antipatterns to apply negative force weights to 
turn off automatic placement of set pieces


terrain:
set pieces + moldable terrain
2d base terrain, but bits that you can jump on top of?
maybe terrain with heightmaps and only a few (2-3) levels available.
terrain design is:
  hopping around from stump to stump
  hopping across rocks in a stream
  metroid prime hopping
  optimized fr hops




Libraries:

https://threejs.org/docs/index.html#manual/introduction/Creating-a-scene
https://expressjs.com/
https://github.com/voidqk/polybooljs
